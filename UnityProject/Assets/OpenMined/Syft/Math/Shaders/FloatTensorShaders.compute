//

struct Dimensions {
	int rows;
	int columns;
};

#pragma kernel Abs

RWStructuredBuffer<float> AbsData;
RWStructuredBuffer<float> AbsResult;

[numthreads(4,1,1)]
void Abs (uint3 id : SV_DispatchThreadID) {
	if(AbsData[id.x] < 0) {
		AbsResult[id.x] = -AbsData[id.x];
	} else {
		AbsResult[id.x] = AbsData[id.x];
	}
}

#pragma kernel Abs_

RWStructuredBuffer<float> AbsData_;

[numthreads(1,1,1)]
void Abs_ (uint3 id : SV_DispatchThreadID) {
	if(AbsData_[id.x] < 0) {
		AbsData_[id.x] = -AbsData_[id.x];
	}
}

#pragma kernel Acos

RWStructuredBuffer<float> AcosData;
RWStructuredBuffer<float> AcosResult;

[numthreads(4,1,1)]
void Acos (uint3 id: SV_DispatchThreadID) {
	AcosResult[id.x] = acos(AcosData[id.x]);
}

#pragma kernel Acos_
RWStructuredBuffer<float> AcosData_;

[numthreads(4,1,1)]
void Acos_ (uint3 id: SV_DispatchThreadID) {
    AcosData_[id.x] = acos(AcosData_[id.x]);
}

#pragma kernel Asin

RWStructuredBuffer<float> AsinData;
RWStructuredBuffer<float> AsinResult;

[numthreads(4,1,1)]
void Asin (uint3 id: SV_DispatchThreadID) {
	AsinResult[id.x] = asin(AsinData[id.x]);
}

#pragma kernel Asin_
RWStructuredBuffer<float> AsinData_;

[numthreads(4,1,1)]
void Asin_ (uint3 id: SV_DispatchThreadID) {
    AsinData_[id.x] = asin(AsinData_[id.x]);
}

#pragma kernel Atan

RWStructuredBuffer<float> AtanData;
RWStructuredBuffer<float> AtanResult;

[numthreads(4,1,1)]
void Atan (uint3 id: SV_DispatchThreadID) {
	AtanResult[id.x] = atan(AtanData[id.x]);
}

#pragma kernel Atan_
RWStructuredBuffer<float> AtanData_;

[numthreads(4,1,1)]
void Atan_ (uint3 id: SV_DispatchThreadID) {
    AtanData_[id.x] = atan(AtanData_[id.x]);
}

#pragma kernel AddScalar_

RWStructuredBuffer<float> AddScalarData_;
RWStructuredBuffer<float> AddScalarScalar_;

[numthreads(4,1,1)]
void AddScalar_ (uint3 id: SV_DispatchThreadID) {
	AddScalarData_[id.x] = AddScalarData_[id.x] + AddScalarScalar_[0];
}

#pragma kernel AddElem_

RWStructuredBuffer<float> AddElemDataA_;
RWStructuredBuffer<float> AddElemDataB_;

[numthreads(4,1,1)]
void AddElem_ (uint3 id: SV_DispatchThreadID) {
	AddElemDataA_[id.x] = AddElemDataA_[id.x] + AddElemDataB_[id.x];
}

#pragma kernel AddScalar

RWStructuredBuffer<float> AddScalarData;
RWStructuredBuffer<float> AddScalarScalar;
RWStructuredBuffer<float> AddScalarResult;

[numthreads(4,1,1)]
void AddScalar (uint3 id: SV_DispatchThreadID) {
	AddScalarResult[id.x] = AddScalarData[id.x] + AddScalarScalar[0];
}

#pragma kernel AddElem

RWStructuredBuffer<float> AddElemDataA;
RWStructuredBuffer<float> AddElemDataB;
RWStructuredBuffer<float> AddElemDataResult;

[numthreads(4,1,1)]
void AddElem (uint3 id: SV_DispatchThreadID) {
	AddElemDataResult[id.x] = AddElemDataA[id.x] + AddElemDataB[id.x];
}

#pragma kernel AddMM_

RWStructuredBuffer<float> AddmmDataA_;
RWStructuredBuffer<float> AddmmDataB_;
RWStructuredBuffer<float> AddmmDataC_;
RWStructuredBuffer<Dimensions> AddmmDimensions_;

[numthreads(4,1,1)]
void AddMM_ (uint3 id : SV_DispatchThreadID) {
	// transpose
	int columns = AddmmDimensions_[0].rows;
	int rows = AddmmDimensions_[0].columns;

	float product = 0;

	int t = 0;
	for (int i = 0; i < columns; i++) {
		product += AddmmDataB_[id.x + t] * AddmmDataC_[i];
		t += rows;
	}

	AddmmDataA_[id.x] += product;
}

#pragma kernel AddMV_

RWStructuredBuffer<int> AddMVRefShape_;
RWStructuredBuffer<float> AddMVRefData;
RWStructuredBuffer<float> AddMVMatrixData;
RWStructuredBuffer<float> AddMVVectorData;

[numthreads(4,1,1)]
void AddMV_ (uint3 id : SV_DispatchThreadID){
	int refShape = AddMVRefShape_[0];
	for (int i = 0; i < refShape; i++){
		AddMVRefData[id.x] += AddMVVectorData[i] * AddMVMatrixData[i + (id.x * refShape)];
	}
}

#pragma kernel Ceil

RWStructuredBuffer<float> CeilData;
RWStructuredBuffer<float> CeilResult;
[numthreads(4,1,1)]
void Ceil (uint3 id: SV_DispatchThreadID) {
		CeilResult[id.x] = ceil(CeilData[id.x]);
}

#pragma kernel Ceil_

RWStructuredBuffer<float> CeilData_;
[numthreads(4,1,1)]
void Ceil_ (uint3 id: SV_DispatchThreadID) {
		CeilData_[id.x] = ceil(CeilData_[id.x]);
}


#pragma kernel CopyBuffer
StructuredBuffer<float> buffer1;
RWStructuredBuffer<float> buffer2;

[numthreads(4,1,1)]

void CopyBuffer (uint3 id : SV_DispatchThreadID)

{
	buffer2[id.x] = buffer1[id.x];
}

#pragma kernel Cos

RWStructuredBuffer<float> CosData;
RWStructuredBuffer<float> CosResult;

[numthreads(4,1,1)]
void Cos (uint3 id: SV_DispatchThreadID) {
	CosResult[id.x] = cos(CosData[id.x]);
}

#pragma kernel Cos_
RWStructuredBuffer<float> CosData_;

[numthreads(4,1,1)]
void Cos_ (uint3 id: SV_DispatchThreadID) {
    CosData_[id.x] = cos(CosData_[id.x]);
}

 #pragma kernel Cosh

RWStructuredBuffer<float> CoshData;
RWStructuredBuffer<float> CoshResult;

[numthreads(4,1,1)]
void Cosh (uint3 id: SV_DispatchThreadID) {
	CoshResult[id.x] = cosh(CoshData[id.x]);
}

#pragma kernel Cosh_
RWStructuredBuffer<float> CoshData_;

[numthreads(4,1,1)]
void Cosh_ (uint3 id: SV_DispatchThreadID) {
    CoshData_[id.x] = cosh(CoshData_[id.x]);
}

#pragma kernel DivScalar_

RWStructuredBuffer<float> DivScalarData_;
RWStructuredBuffer<float> DivScalarScalar_;

[numthreads(4,1,1)]
void DivScalar_ (uint3 id: SV_DispatchThreadID) {
	DivScalarData_[id.x] = DivScalarData_[id.x] / DivScalarScalar_[0];
}

#pragma kernel DivElem_

RWStructuredBuffer<float> DivElemDataA_;
RWStructuredBuffer<float> DivElemDataB_;

[numthreads(4,1,1)]
void DivElem_ (uint3 id: SV_DispatchThreadID) {
	DivElemDataA_[id.x] = DivElemDataA_[id.x] / DivElemDataB_[id.x];
}

#pragma kernel DivScalar

RWStructuredBuffer<float> DivScalarData;
RWStructuredBuffer<float> DivScalarScalar;
RWStructuredBuffer<float> DivScalarResult;

[numthreads(4,1,1)]
void DivScalar (uint3 id: SV_DispatchThreadID) {
	DivScalarResult[id.x] = DivScalarData[id.x] / DivScalarScalar[0];
}

#pragma kernel DivElem

RWStructuredBuffer<float> DivElemDataA;
RWStructuredBuffer<float> DivElemDataB;
RWStructuredBuffer<float> DivElemDataResult;

[numthreads(4,1,1)]
void DivElem (uint3 id: SV_DispatchThreadID) {
	DivElemDataResult[id.x] = DivElemDataA[id.x] / DivElemDataB[id.x];
}

#pragma kernel Exp

RWStructuredBuffer<float> ExpData;
RWStructuredBuffer<float> ExpResult;

[numthreads(4,1,1)]
void Exp (uint3 id: SV_DispatchThreadID) {
	ExpResult[id.x] = exp(ExpData[id.x]);
}

#pragma kernel Floor_

RWStructuredBuffer<float> FloorData_;

[numthreads(4,1,1)]
void Floor_ (uint3 id: SV_DispatchThreadID) {
		FloorData_[id.x] = floor(FloorData_[id.x]);
}

#pragma kernel Floor

RWStructuredBuffer<float> FloorData;
RWStructuredBuffer<float> FloorResult;

[numthreads(4,1,1)]
void Floor (uint3 id: SV_DispatchThreadID) {
		FloorResult[id.x] = floor(FloorData[id.x]);
}

#pragma kernel MulScalar_

RWStructuredBuffer<float> MulScalarData_;
RWStructuredBuffer<float> MulScalarScalar_;

[numthreads(4,1,1)]
void MulScalar_ (uint3 id: SV_DispatchThreadID) {
	MulScalarData_[id.x] = MulScalarData_[id.x] * MulScalarScalar_[0];
}

#pragma kernel MulElem_

RWStructuredBuffer<float> MulElemDataA_;
RWStructuredBuffer<float> MulElemDataB_;

[numthreads(4,1,1)]
void MulElem_ (uint3 id: SV_DispatchThreadID) {
	MulElemDataA_[id.x] = MulElemDataA_[id.x] * MulElemDataB_[id.x];
}

#pragma kernel MulScalar

RWStructuredBuffer<float> MulScalarData;
RWStructuredBuffer<float> MulScalarScalar;
RWStructuredBuffer<float> MulScalarResult;

[numthreads(4,1,1)]
void MulScalar (uint3 id: SV_DispatchThreadID) {
	MulScalarResult[id.x] = MulScalarData[id.x] * MulScalarScalar[0];
}

#pragma kernel MulElem

RWStructuredBuffer<float> MulElemDataA;
RWStructuredBuffer<float> MulElemDataB;
RWStructuredBuffer<float> MulElemDataResult;

[numthreads(4,1,1)]
void MulElem (uint3 id: SV_DispatchThreadID) {
	MulElemDataResult[id.x] = MulElemDataA[id.x] * MulElemDataB[id.x];
}

#pragma kernel PowScalar_

RWStructuredBuffer<float> PowScalarData_;
RWStructuredBuffer<float> PowScalarScalar_;

[numthreads(4,1,1)]
void PowScalar_ (uint3 id: SV_DispatchThreadID) {
	PowScalarData_[id.x] = pow(abs(PowScalarData_[id.x]), PowScalarScalar_[0]);
}

#pragma kernel PowElem_

RWStructuredBuffer<float> PowElemDataA_;
RWStructuredBuffer<float> PowElemDataB_;

[numthreads(4,1,1)]
void PowElem_ (uint3 id: SV_DispatchThreadID) {
	PowElemDataA_[id.x] = pow(abs(PowElemDataA_[id.x]), PowElemDataB_[id.x]);
}

#pragma kernel PowScalar

RWStructuredBuffer<float> PowScalarData;
RWStructuredBuffer<float> PowScalarScalar;
RWStructuredBuffer<float> PowScalarResult;

[numthreads(4,1,1)]
void PowScalar (uint3 id: SV_DispatchThreadID) {
	PowScalarResult[id.x] = pow(abs(PowScalarData[id.x]), PowScalarScalar[0]);
}

#pragma kernel PowElem

RWStructuredBuffer<float> PowElemDataA;
RWStructuredBuffer<float> PowElemDataB;
RWStructuredBuffer<float> PowElemDataResult;

[numthreads(4,1,1)]
void PowElem (uint3 id: SV_DispatchThreadID) {
	PowElemDataResult[id.x] = pow(abs(PowElemDataA[id.x]), PowElemDataB[id.x]);
}

#pragma kernel Negate

RWStructuredBuffer<float> NegateData;
RWStructuredBuffer<float> NegateResult;
[numthreads(4,1,1)]
void Negate (uint3 id: SV_DispatchThreadID) {
	NegateResult[id.x] = -NegateData[id.x];
}

#pragma kernel Rsqrt

RWStructuredBuffer<float> RsqrtData;
RWStructuredBuffer<float> RsqrtResult;
[numthreads(4,1,1)]
void Rsqrt (uint3 id: SV_DispatchThreadID) {
	RsqrtResult[id.x] = rsqrt(RsqrtData[id.x]);
}

#pragma kernel Sigmoid_

RWStructuredBuffer<float> SigmoidData_;

[numthreads(1,1,1)]
void Sigmoid_ (uint3 id : SV_DispatchThreadID) {
	SigmoidData_[id.x] = 1 / (1 + exp(-SigmoidData_[id.x]));
}

#pragma kernel Sigmoid

RWStructuredBuffer<float> SigmoidData;
RWStructuredBuffer<float> SigmoidResult;

[numthreads(1,1,1)]
void Sigmoid (uint3 id : SV_DispatchThreadID) {
	SigmoidResult[id.x] = 1 / (1 + exp(-SigmoidData[id.x]));
}

#pragma kernel Sign

RWStructuredBuffer<float> SignData;
RWStructuredBuffer<float> SignResult;

[numthreads(1,1,1)]
void Sign (uint3 id : SV_DispatchThreadID) {
	if(SignData[id.x] < 0) {
		SignResult[id.x] = -1;
	} else if(SignData[id.x] > 0) {
		SignResult[id.x] = 1;
	} else {
		SignResult[id.x] = 0;
	}
}

#pragma kernel Sign_

RWStructuredBuffer<float> SignData_;

[numthreads(1,1,1)]
void Sign_ (uint3 id : SV_DispatchThreadID) {
	if(SignData_[id.x] < 0) {
		SignData_[id.x] = -1;
	} else if(SignData_[id.x] > 0) {
		SignData_[id.x] = 1;
	}
}

#pragma kernel Sin

RWStructuredBuffer<float> SinData;
RWStructuredBuffer<float> SinResult;

[numthreads(4,1,1)]
void Sin (uint3 id: SV_DispatchThreadID) {
	SinResult[id.x] = sin(SinData[id.x]);
}

#pragma kernel Sin_
RWStructuredBuffer<float> SinData_;

[numthreads(4,1,1)]
void Sin_ (uint3 id: SV_DispatchThreadID) {
    SinData_[id.x] = sin(SinData_[id.x]);
}

#pragma kernel Sqrt

RWStructuredBuffer<float> SqrtData;
RWStructuredBuffer<float> SqrtResult;

[numthreads(1,1,1)]
void Sqrt (uint3 id : SV_DispatchThreadID) {
	SqrtResult[id.x] = sqrt(SqrtData[id.x]);
}

#pragma kernel SubScalar_

RWStructuredBuffer<float> SubScalarData_;
RWStructuredBuffer<float> SubScalarScalar_;

[numthreads(4,1,1)]
void SubScalar_ (uint3 id: SV_DispatchThreadID) {
	SubScalarData_[id.x] = SubScalarData_[id.x] - SubScalarScalar_[0];
}

#pragma kernel SubElem_

RWStructuredBuffer<float> SubElemDataA_;
RWStructuredBuffer<float> SubElemDataB_;

[numthreads(4,1,1)]
void SubElem_ (uint3 id: SV_DispatchThreadID) {
	SubElemDataA_[id.x] = SubElemDataA_[id.x] - SubElemDataB_[id.x];
}

#pragma kernel SubScalar

RWStructuredBuffer<float> SubScalarData;
RWStructuredBuffer<float> SubScalarScalar;
RWStructuredBuffer<float> SubScalarResult;

[numthreads(4,1,1)]
void SubScalar (uint3 id: SV_DispatchThreadID) {
	SubScalarResult[id.x] = SubScalarData[id.x] - SubScalarScalar[0];
}

#pragma kernel SubElem

RWStructuredBuffer<float> SubElemDataA;
RWStructuredBuffer<float> SubElemDataB;
RWStructuredBuffer<float> SubElemDataResult;

[numthreads(4,1,1)]
void SubElem (uint3 id: SV_DispatchThreadID) {
	SubElemDataResult[id.x] = SubElemDataA[id.x] - SubElemDataB[id.x];
}

#pragma kernel Tan

RWStructuredBuffer<float> TanData;
RWStructuredBuffer<float> TanResult;

[numthreads(4,1,1)]
void Tan (uint3 id: SV_DispatchThreadID) {
	TanResult[id.x] = tan(TanData[id.x]);
}

#pragma kernel Tan_
RWStructuredBuffer<float> TanData_;

[numthreads(4,1,1)]
void Tan_ (uint3 id: SV_DispatchThreadID) {
    TanData_[id.x] = tan(TanData_[id.x]);
}

#pragma kernel Tanh

RWStructuredBuffer<float> TanhData;
RWStructuredBuffer<float> TanhResult;

[numthreads(4,1,1)]
void Tanh (uint3 id: SV_DispatchThreadID) {
	TanhResult[id.x] = tanh(TanhData[id.x]);
}

#pragma kernel Sinh

RWStructuredBuffer<float> SinhData;
RWStructuredBuffer<float> SinhResult;

[numthreads(4,1,1)]
void Sinh (uint3 id: SV_DispatchThreadID) {
	SinhResult[id.x] = sinh(SinhData[id.x]);
}

#pragma kernel Sinh_
RWStructuredBuffer<float> SinhData_;

[numthreads(4,1,1)]
void Sinh_ (uint3 id: SV_DispatchThreadID) {
    SinhData_[id.x] = sinh(SinhData_[id.x]);
}

#pragma kernel Triu_

RWStructuredBuffer<int> TriuK_;
RWStructuredBuffer<Dimensions> TriuDimensions_;
RWStructuredBuffer<float> TriuData_;

[numthreads(4,1,1)]
void Triu_ (uint3 id: SV_DispatchThreadID) {

	int rows = TriuDimensions_[0].rows;
	int columns = TriuDimensions_[0].columns;
	int k = TriuK_[0];

	int col = (int)(id % columns);
	int row = (int)((id - col) / columns);
	if (col < row + k)
	{
		TriuData_[id.x] = 0;
	}
}

#pragma kernel Trunc

RWStructuredBuffer<float> TruncData;
RWStructuredBuffer<float> TruncResult;

[numthreads(4,1,1)]
void Trunc (uint3 id: SV_DispatchThreadID) {
	TruncResult[id.x] = trunc(TruncData[id.x]);
}

#pragma kernel Zero_

RWStructuredBuffer<float> ZeroData_;

[numthreads(4,1,1)]
void Zero_ (uint3 id: SV_DispatchThreadID) {
       ZeroData_[id.x] = 0;
}
