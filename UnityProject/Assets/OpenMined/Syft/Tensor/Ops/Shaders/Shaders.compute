//

struct Dimensions {
	int rows;
	int columns;
};

#pragma kernel Abs

StructuredBuffer<float> AbsData;
RWStructuredBuffer<float> AbsResult;

[numthreads(4,1,1)]
void Abs (uint3 id : SV_DispatchThreadID) {
	if(AbsData[id.x] < 0) {
		AbsResult[id.x] = -AbsData[id.x];
	} else {
		AbsResult[id.x] = AbsData[id.x];
	}
}

#pragma kernel Abs_

RWStructuredBuffer<float> AbsData_;

[numthreads(1,1,1)]
void Abs_ (uint3 id : SV_DispatchThreadID) {
	if(AbsData_[id.x] < 0) {
		AbsData_[id.x] = -AbsData_[id.x];
	}
}

#pragma kernel Acos

StructuredBuffer<float> AcosData;
RWStructuredBuffer<float> AcosResult;

[numthreads(4,1,1)]
void Acos (uint3 id: SV_DispatchThreadID) {
	AcosResult[id.x] = acos(AcosData[id.x]);
}

#pragma kernel Acos_
RWStructuredBuffer<float> AcosData_;

[numthreads(4,1,1)]
void Acos_ (uint3 id: SV_DispatchThreadID) {
    AcosData_[id.x] = acos(AcosData_[id.x]);
}

#pragma kernel Asin

StructuredBuffer<float> AsinData;
RWStructuredBuffer<float> AsinResult;

[numthreads(4,1,1)]
void Asin (uint3 id: SV_DispatchThreadID) {
	AsinResult[id.x] = asin(AsinData[id.x]);
}

#pragma kernel Asin_
RWStructuredBuffer<float> AsinData_;

[numthreads(4,1,1)]
void Asin_ (uint3 id: SV_DispatchThreadID) {
    AsinData_[id.x] = asin(AsinData_[id.x]);
}

#pragma kernel Atan

StructuredBuffer<float> AtanData;
RWStructuredBuffer<float> AtanResult;

[numthreads(4,1,1)]
void Atan (uint3 id: SV_DispatchThreadID) {
	AtanResult[id.x] = atan(AtanData[id.x]);
}

#pragma kernel Atan_
RWStructuredBuffer<float> AtanData_;

[numthreads(4,1,1)]
void Atan_ (uint3 id: SV_DispatchThreadID) {
    AtanData_[id.x] = atan(AtanData_[id.x]);
}

#pragma kernel AddScalar_

RWStructuredBuffer<float> AddScalarData_;
StructuredBuffer<float> AddScalarScalar_;

[numthreads(4,1,1)]
void AddScalar_ (uint3 id: SV_DispatchThreadID) {
	AddScalarData_[id.x] = AddScalarData_[id.x] + AddScalarScalar_[0];
}

#pragma kernel AddElem_

RWStructuredBuffer<float> AddElemDataA_;
StructuredBuffer<float> AddElemDataB_;

[numthreads(4,1,1)]
void AddElem_ (uint3 id: SV_DispatchThreadID) {
	AddElemDataA_[id.x] = AddElemDataA_[id.x] + AddElemDataB_[id.x];
}

#pragma kernel AddScalar

StructuredBuffer<float> AddScalarData;
StructuredBuffer<float> AddScalarScalar;
RWStructuredBuffer<float> AddScalarResult;

[numthreads(4,1,1)]
void AddScalar (uint3 id: SV_DispatchThreadID) {
	AddScalarResult[id.x] = AddScalarData[id.x] + AddScalarScalar[0];
}

#pragma kernel AddElem

StructuredBuffer<float> AddElemDataA;
StructuredBuffer<float> AddElemDataB;
RWStructuredBuffer<float> AddElemDataResult;

[numthreads(4,1,1)]
void AddElem (uint3 id: SV_DispatchThreadID) {
	AddElemDataResult[id.x] = AddElemDataA[id.x] + AddElemDataB[id.x];
}

#pragma kernel AddElemInt

StructuredBuffer<int> AddElemIntDataA;
StructuredBuffer<int> AddElemIntDataB;
RWStructuredBuffer<int> AddElemIntDataResult;

[numthreads(4,1,1)]
void AddElemInt (uint3 id: SV_DispatchThreadID) {

	AddElemIntDataResult[id.x] = AddElemIntDataA[id.x] + AddElemIntDataB[id.x];
}

#pragma kernel AddElemInt_

RWStructuredBuffer<int> AddElemIntDataA_;
StructuredBuffer<int> AddElemIntDataB_;

[numthreads(4,1,1)]
void AddElemInt_ (uint3 id: SV_DispatchThreadID) {
	AddElemIntDataA_[id.x] += AddElemIntDataB_[id.x];
}

#pragma kernel AbsElemInt

StructuredBuffer<int> AbsElemIntData;
RWStructuredBuffer<int> AbsElemIntDataResult;

[numthreads(4,1,1)]
void AbsElemInt (uint3 id: SV_DispatchThreadID) {

    AbsElemIntDataResult[id.x] = abs(AbsElemIntData[id.x]);
}

#pragma kernel AbsElemInt_

RWStructuredBuffer<int> AbsElemIntData_;

[numthreads(4,1,1)]
void AbsElemInt_ (uint3 id: SV_DispatchThreadID) {

    if(AbsElemIntData_[id.x] < 0) {
        AbsElemIntData_[id.x] = -AbsElemIntData_[id.x];
    }
}

#pragma kernel AddMM_

RWStructuredBuffer<float> AddmmDataA_;
StructuredBuffer<float> AddmmDataB_;
StructuredBuffer<float> AddmmDataC_;
StructuredBuffer<int> AddmmDimensionsN_;
StructuredBuffer<int> AddmmDimensionsO_;

[numthreads(4,1,1)]
void AddMM_ (uint3 id : SV_DispatchThreadID) {

	int N = AddmmDimensionsN_[0];
	int O = AddmmDimensionsO_[0];

	for (int i = 0; i < N; i++) {
		int Arow = (int) ( ( id.x - (id.x % O) ) / O);
		int Acol = id.x % O;
		int BDataIndex = (Arow * N) + i;
		int CDataIndex = Acol + (i * O);
		AddmmDataA_[id.x] += AddmmDataB_[ BDataIndex ] * AddmmDataC_[ CDataIndex ];
	}
}

#pragma kernel AddMV_

StructuredBuffer<int> AddMVRefShape_;
RWStructuredBuffer<float> AddMVRefData;
StructuredBuffer<float> AddMVMatrixData;
StructuredBuffer<float> AddMVVectorData;

[numthreads(4,1,1)]
void AddMV_ (uint3 id : SV_DispatchThreadID){
	int refShape = AddMVRefShape_[0];
	for (int i = 0; i < refShape; i++){
		AddMVRefData[id.x] += AddMVVectorData[i] * AddMVMatrixData[i + (id.x * refShape)];
	}
}

#pragma kernel Ceil

StructuredBuffer<float> CeilData;
RWStructuredBuffer<float> CeilResult;
[numthreads(4,1,1)]
void Ceil (uint3 id: SV_DispatchThreadID) {
		CeilResult[id.x] = ceil(CeilData[id.x]);
}

#pragma kernel Ceil_

RWStructuredBuffer<float> CeilData_;
[numthreads(4,1,1)]
void Ceil_ (uint3 id: SV_DispatchThreadID) {
		CeilData_[id.x] = ceil(CeilData_[id.x]);
}

#pragma kernel CopyBuffer
StructuredBuffer<float> buffer1;
RWStructuredBuffer<float> buffer2;

[numthreads(4,1,1)]

void CopyBuffer (uint3 id : SV_DispatchThreadID) {
	buffer2[id.x] = buffer1[id.x];
}

#pragma kernel Cos

StructuredBuffer<float> CosData;
RWStructuredBuffer<float> CosResult;

[numthreads(4,1,1)]
void Cos (uint3 id: SV_DispatchThreadID) {
	CosResult[id.x] = cos(CosData[id.x]);
}

#pragma kernel Cos_
RWStructuredBuffer<float> CosData_;

[numthreads(4,1,1)]
void Cos_ (uint3 id: SV_DispatchThreadID) {
    CosData_[id.x] = cos(CosData_[id.x]);
}

 #pragma kernel Cosh

StructuredBuffer<float> CoshData;
RWStructuredBuffer<float> CoshResult;

[numthreads(4,1,1)]
void Cosh (uint3 id: SV_DispatchThreadID) {
	CoshResult[id.x] = cosh(CoshData[id.x]);
}

#pragma kernel Cosh_
RWStructuredBuffer<float> CoshData_;

[numthreads(4,1,1)]
void Cosh_ (uint3 id: SV_DispatchThreadID) {
    CoshData_[id.x] = cosh(CoshData_[id.x]);
}

#pragma kernel Diagonal

StructuredBuffer<int> DiagonalNumcolumns;
RWStructuredBuffer<float> DiagonalData;
RWStructuredBuffer<float> DiagonalResult;

[numthreads(8,1,1)]
void Diagonal (uint3 id: SV_DispatchThreadID) {
    int columns = DiagonalNumcolumns[0];

    int indexIn  = id.x * (columns + 1);  // access diagonal elements
    int indexOut = id.x;
    DiagonalResult[indexOut] = DiagonalData[indexIn];
}

#pragma kernel DivScalar_

RWStructuredBuffer<float> DivScalarData_;
StructuredBuffer<float> DivScalarScalar_;

[numthreads(4,1,1)]
void DivScalar_ (uint3 id: SV_DispatchThreadID) {
	DivScalarData_[id.x] = DivScalarData_[id.x] / DivScalarScalar_[0];
}

#pragma kernel DivElem_

RWStructuredBuffer<float> DivElemDataA_;
StructuredBuffer<float> DivElemDataB_;

[numthreads(4,1,1)]
void DivElem_ (uint3 id: SV_DispatchThreadID) {
	DivElemDataA_[id.x] /= DivElemDataB_[id.x];
}

#pragma kernel DivScalar

StructuredBuffer<float> DivScalarData;
StructuredBuffer<float> DivScalarScalar;
RWStructuredBuffer<float> DivScalarResult;

[numthreads(4,1,1)]
void DivScalar (uint3 id: SV_DispatchThreadID) {
	DivScalarResult[id.x] = DivScalarData[id.x] / DivScalarScalar[0];
}

#pragma kernel DivElem

StructuredBuffer<float> DivElemDataA;
StructuredBuffer<float> DivElemDataB;
RWStructuredBuffer<float> DivElemDataResult;

[numthreads(4,1,1)]
void DivElem (uint3 id: SV_DispatchThreadID) {
	DivElemDataResult[id.x] = DivElemDataA[id.x] / DivElemDataB[id.x];
}

#pragma kernel Exp

StructuredBuffer<float> ExpData;
RWStructuredBuffer<float> ExpResult;

[numthreads(4,1,1)]
void Exp (uint3 id: SV_DispatchThreadID) {
	ExpResult[id.x] = exp(ExpData[id.x]);
}

#pragma kernel Exp_

RWStructuredBuffer<float> ExpData_;

[numthreads(4,1,1)]
void Exp_ (uint3 id: SV_DispatchThreadID) {
    ExpData_[id.x] = exp(ExpData_[id.x]);
}

#pragma kernel Floor_

RWStructuredBuffer<float> FloorData_;

[numthreads(4,1,1)]
void Floor_ (uint3 id: SV_DispatchThreadID) {
		FloorData_[id.x] = floor(FloorData_[id.x]);
}

#pragma kernel Floor

StructuredBuffer<float> FloorData;
RWStructuredBuffer<float> FloorResult;

[numthreads(4,1,1)]
void Floor (uint3 id: SV_DispatchThreadID) {
		FloorResult[id.x] = floor(FloorData[id.x]);
}

#pragma kernel Round

StructuredBuffer<float> RoundData;
RWStructuredBuffer<float> RoundResult;

[numthreads(4,1,1)]
void Round (uint3 id: SV_DispatchThreadID) {
	RoundResult[id.x] = round(RoundData[id.x]);
}

#pragma kernel Round_

RWStructuredBuffer<float> RoundData_;

[numthreads(4,1,1)]
void Round_ (uint3 id: SV_DispatchThreadID) {
	RoundData_[id.x] = round(RoundData_[id.x]);
}

#pragma kernel Log1p

StructuredBuffer<float> Log1pData;
RWStructuredBuffer<float> Log1pResult;

[numthreads(4,1,1)]
void Log1p (uint3 id: SV_DispatchThreadID) {
	Log1pResult[id.x] = log(1 + Log1pData[id.x]);
}

#pragma kernel Log1p_

RWStructuredBuffer<float> Log1pData_;

[numthreads(4,1,1)]
void Log1p_ (uint3 id: SV_DispatchThreadID) {
	Log1pData_[id.x] = log(1 + Log1pData_[id.x]);
}

#pragma kernel MulScalar_

RWStructuredBuffer<float> MulScalarData_;
StructuredBuffer<float> MulScalarScalar_;

[numthreads(4,1,1)]
void MulScalar_ (uint3 id: SV_DispatchThreadID) {
	MulScalarData_[id.x] = MulScalarData_[id.x] * MulScalarScalar_[0];
}

#pragma kernel MulElem_

RWStructuredBuffer<float> MulElemDataA_;
StructuredBuffer<float> MulElemDataB_;

[numthreads(4,1,1)]
void MulElem_ (uint3 id: SV_DispatchThreadID) {
	MulElemDataA_[id.x] = MulElemDataA_[id.x] * MulElemDataB_[id.x];
}

#pragma kernel MulScalar

StructuredBuffer<float> MulScalarData;
StructuredBuffer<float> MulScalarScalar;
RWStructuredBuffer<float> MulScalarResult;

[numthreads(4,1,1)]
void MulScalar (uint3 id: SV_DispatchThreadID) {
	MulScalarResult[id.x] = MulScalarData[id.x] * MulScalarScalar[0];
}

#pragma kernel MulElem

StructuredBuffer<float> MulElemDataA;
StructuredBuffer<float> MulElemDataB;
RWStructuredBuffer<float> MulElemDataResult;

[numthreads(4,1,1)]
void MulElem (uint3 id: SV_DispatchThreadID) {
	MulElemDataResult[id.x] = MulElemDataA[id.x] * MulElemDataB[id.x];
}

#pragma kernel PowScalar_

RWStructuredBuffer<float> PowScalarData_;
StructuredBuffer<float> PowScalarScalar_;

[numthreads(4,1,1)]
void PowScalar_ (uint3 id: SV_DispatchThreadID) {
	PowScalarData_[id.x] = pow(abs(PowScalarData_[id.x]), PowScalarScalar_[0]);
}

#pragma kernel PowElem_

RWStructuredBuffer<float> PowElemDataA_;
StructuredBuffer<float> PowElemDataB_;

[numthreads(4,1,1)]
void PowElem_ (uint3 id: SV_DispatchThreadID) {
	PowElemDataA_[id.x] = pow(abs(PowElemDataA_[id.x]), PowElemDataB_[id.x]);
}

#pragma kernel PowScalar

StructuredBuffer<float> PowScalarData;
StructuredBuffer<float> PowScalarScalar;
RWStructuredBuffer<float> PowScalarResult;

[numthreads(4,1,1)]
void PowScalar (uint3 id: SV_DispatchThreadID) {
	PowScalarResult[id.x] = pow(abs(PowScalarData[id.x]), PowScalarScalar[0]);
}

#pragma kernel PowElem

StructuredBuffer<float> PowElemDataA;
StructuredBuffer<float> PowElemDataB;
RWStructuredBuffer<float> PowElemDataResult;

[numthreads(4,1,1)]
void PowElem (uint3 id: SV_DispatchThreadID) {
	PowElemDataResult[id.x] = pow(abs(PowElemDataA[id.x]), PowElemDataB[id.x]);
}

#pragma kernel Negate

StructuredBuffer<float> NegateData;
RWStructuredBuffer<float> NegateResult;
[numthreads(4,1,1)]
void Negate (uint3 id: SV_DispatchThreadID) {
	NegateResult[id.x] = -NegateData[id.x];
}

#pragma kernel Negate_

RWStructuredBuffer<float> NegateData_;
[numthreads(4,1,1)]
void Negate_ (uint3 id: SV_DispatchThreadID) {
	NegateData_[id.x] = -NegateData_[id.x];
}

#pragma kernel NegateInt

StructuredBuffer<int> NegateIntData;
RWStructuredBuffer<int> NegateIntResult;
[numthreads(4,1,1)]
void NegateInt (uint3 id: SV_DispatchThreadID) {
	NegateIntResult[id.x] = -NegateIntData[id.x];
}

#pragma kernel NegateInt_

RWStructuredBuffer<int> NegateIntData_;
[numthreads(4,1,1)]
void NegateInt_ (uint3 id: SV_DispatchThreadID) {
	NegateIntData_[id.x] = -NegateIntData_[id.x];
}

#pragma kernel Reduce1DSum
#define REDUCE1D_NUMTHREADS 8

StructuredBuffer<float> Reduce1DSumData;
RWStructuredBuffer<float> Reduce1DSumResult;

groupshared float sharedMem[REDUCE1D_NUMTHREADS * 1 * 1];

[numthreads(REDUCE1D_NUMTHREADS, 1, 1)]
void Reduce1DSum (uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID, uint3 id: SV_DispatchThreadID) {
    sharedMem[groupThreadID.x] = Reduce1DSumData[id.x];

		if ( isnan(sharedMem[groupThreadID.x]) ) {
				sharedMem[groupThreadID.x] = 0;
		}
		GroupMemoryBarrierWithGroupSync();

    [unroll(REDUCE1D_NUMTHREADS / 2)]
    for (uint s = REDUCE1D_NUMTHREADS / 2; s > 0; s >>= 1)
    {
        if (groupThreadID.x < s) {
            sharedMem[groupThreadID.x] += sharedMem[groupThreadID.x + s];
				}
        GroupMemoryBarrierWithGroupSync();
    }

    // Have the 1st thread write out to the output
    if (groupThreadID.x == 0)
    {
				Reduce1DSumResult[groupID.x] = sharedMem[0];
    }
}

#pragma kernel Reciprocal

StructuredBuffer<float> ReciprocalData;
RWStructuredBuffer<float> ReciprocalResult;

[numthreads(4,1,1)]
void Reciprocal (uint3 id: SV_DispatchThreadID) {
	ReciprocalResult[id.x] = 1 / ReciprocalData[id.x];
}

#pragma kernel Reciprocal_

RWStructuredBuffer<float> ReciprocalData_;

[numthreads(4,1,1)]
void Reciprocal_ (uint3 id: SV_DispatchThreadID) {
    ReciprocalData_[id.x] = 1 / ReciprocalData_[id.x];
}

#pragma kernel RemainderElem_

RWStructuredBuffer<float> RemainderElemDataA_;
StructuredBuffer<float> RemainderElemDataB_;

[numthreads(4,1,1)]
void RemainderElem_ (uint3 id: SV_DispatchThreadID) {
	RemainderElemDataA_[id.x] = fmod(RemainderElemDataA_[id.x], RemainderElemDataB_[id.x]);
}

#pragma kernel RemainderElem

StructuredBuffer<float> RemainderElemDataA;
StructuredBuffer<float> RemainderElemDataB;
RWStructuredBuffer<float> RemainderElemResult;

[numthreads(4,1,1)]
void RemainderElem (uint3 id: SV_DispatchThreadID) {
	RemainderElemResult[id.x] = fmod(RemainderElemDataA[id.x], RemainderElemDataB[id.x]);
}

#pragma kernel RemainderScalar_

RWStructuredBuffer<float> RemainderScalarData_;
StructuredBuffer<float> RemainderScalarScalar_;

[numthreads(4,1,1)]
void RemainderScalar_ (uint3 id: SV_DispatchThreadID) {
	RemainderScalarData_[id.x] = fmod(RemainderScalarData_[id.x], RemainderScalarScalar_[0]);
}

#pragma kernel RemainderScalar

StructuredBuffer<float> RemainderScalarData;
StructuredBuffer<float> RemainderScalarScalar;
RWStructuredBuffer<float> RemainderScalarResult;

[numthreads(4,1,1)]
void RemainderScalar (uint3 id: SV_DispatchThreadID) {
	RemainderScalarResult[id.x] = fmod(RemainderScalarData[id.x], RemainderScalarScalar[0]);
}

#pragma kernel Rsqrt_

RWStructuredBuffer<float> RsqrtData_;

[numthreads(4,1,1)]
void Rsqrt_ (uint3 id: SV_DispatchThreadID) {
	RsqrtData_[id.x] = rsqrt(RsqrtData_[id.x]);
}

#pragma kernel Rsqrt

StructuredBuffer<float> RsqrtData;
RWStructuredBuffer<float> RsqrtResult;

[numthreads(4,1,1)]
void Rsqrt (uint3 id: SV_DispatchThreadID) {
	RsqrtResult[id.x] = rsqrt(RsqrtData[id.x]);
}

#pragma kernel Sigmoid_

RWStructuredBuffer<float> SigmoidData_;

[numthreads(1,1,1)]
void Sigmoid_ (uint3 id : SV_DispatchThreadID) {
	if (SigmoidData_[id.x] >= 0) {
		SigmoidData_[id.x] = 1 / (1 + exp(-SigmoidData_[id.x]));
	} else {
		float tmp = exp(SigmoidData_[id.x]);
		SigmoidData_[id.x] = tmp / (1 + tmp);
	}
}

#pragma kernel Sigmoid

StructuredBuffer<float> SigmoidData;
RWStructuredBuffer<float> SigmoidResult;

[numthreads(1,1,1)]
void Sigmoid (uint3 id : SV_DispatchThreadID) {
	if (SigmoidData_[id.x] >= 0) {
		SigmoidResult[id.x] = 1 / (1 + exp(-SigmoidData_[id.x]));
	} else {
		float tmp = exp(SigmoidData_[id.x]);
		SigmoidResult[id.x] = tmp / (1 + tmp);
	}
}

#pragma kernel Sign

StructuredBuffer<float> SignData;
RWStructuredBuffer<float> SignResult;

[numthreads(1,1,1)]
void Sign (uint3 id : SV_DispatchThreadID) {
	if(SignData[id.x] < 0) {
		SignResult[id.x] = -1;
	} else if(SignData[id.x] > 0) {
		SignResult[id.x] = 1;
	} else {
		SignResult[id.x] = 0;
	}
}

#pragma kernel Sign_

RWStructuredBuffer<float> SignData_;

[numthreads(1,1,1)]
void Sign_ (uint3 id : SV_DispatchThreadID) {
	if(SignData_[id.x] < 0) {
		SignData_[id.x] = -1;
	} else if(SignData_[id.x] > 0) {
		SignData_[id.x] = 1;
	}
}

#pragma kernel Sin

StructuredBuffer<float> SinData;
RWStructuredBuffer<float> SinResult;

[numthreads(4,1,1)]
void Sin (uint3 id: SV_DispatchThreadID) {
	SinResult[id.x] = sin(SinData[id.x]);
}

#pragma kernel Sin_
RWStructuredBuffer<float> SinData_;

[numthreads(4,1,1)]
void Sin_ (uint3 id: SV_DispatchThreadID) {
    SinData_[id.x] = sin(SinData_[id.x]);
}

#pragma kernel Sqrt

StructuredBuffer<float> SqrtData;
RWStructuredBuffer<float> SqrtResult;

[numthreads(1,1,1)]
void Sqrt (uint3 id : SV_DispatchThreadID) {
	SqrtResult[id.x] = sqrt(SqrtData[id.x]);
}

#pragma kernel Sqrt_

RWStructuredBuffer<float> SqrtData_;

[numthreads(4,1,1)]
void Sqrt_ (uint3 id: SV_DispatchThreadID) {
	SqrtData_[id.x] = sqrt(SqrtData_[id.x]);
}

#pragma kernel SubScalar_

RWStructuredBuffer<float> SubScalarData_;
StructuredBuffer<float> SubScalarScalar_;

[numthreads(4,1,1)]
void SubScalar_ (uint3 id: SV_DispatchThreadID) {
	SubScalarData_[id.x] = SubScalarData_[id.x] - SubScalarScalar_[0];
}

#pragma kernel SubElem_

RWStructuredBuffer<float> SubElemDataA_;
StructuredBuffer<float> SubElemDataB_;

[numthreads(4,1,1)]
void SubElem_ (uint3 id: SV_DispatchThreadID) {
	SubElemDataA_[id.x] = SubElemDataA_[id.x] - SubElemDataB_[id.x];
}

#pragma kernel SubElemInt_

RWStructuredBuffer<int> SubElemIntDataA_;
StructuredBuffer<int> SubElemIntDataB_;

[numthreads(4,1,1)]
void SubElemInt_ (uint3 id: SV_DispatchThreadID) {
	SubElemIntDataA_[id.x] -= SubElemIntDataB_[id.x];
}

#pragma kernel SubScalar

StructuredBuffer<float> SubScalarData;
StructuredBuffer<float> SubScalarScalar;
RWStructuredBuffer<float> SubScalarResult;

[numthreads(4,1,1)]
void SubScalar (uint3 id: SV_DispatchThreadID) {
	SubScalarResult[id.x] = SubScalarData[id.x] - SubScalarScalar[0];
}

#pragma kernel SubElem

StructuredBuffer<float> SubElemDataA;
StructuredBuffer<float> SubElemDataB;
RWStructuredBuffer<float> SubElemDataResult;

[numthreads(4,1,1)]
void SubElem (uint3 id: SV_DispatchThreadID) {
	SubElemDataResult[id.x] = SubElemDataA[id.x] - SubElemDataB[id.x];
}

#pragma kernel SubElemInt

StructuredBuffer<int> SubElemIntDataA;
StructuredBuffer<int> SubElemIntDataB;
RWStructuredBuffer<int> SubElemIntDataResult;

[numthreads(4,1,1)]
void SubElemInt (uint3 id: SV_DispatchThreadID) {

	SubElemIntDataResult[id.x] = SubElemIntDataA[id.x] - SubElemIntDataB[id.x];
}

#pragma kernel Tan

StructuredBuffer<float> TanData;
RWStructuredBuffer<float> TanResult;

[numthreads(4,1,1)]
void Tan (uint3 id: SV_DispatchThreadID) {
	TanResult[id.x] = tan(TanData[id.x]);
}

#pragma kernel Tan_
RWStructuredBuffer<float> TanData_;

[numthreads(4,1,1)]
void Tan_ (uint3 id: SV_DispatchThreadID) {
    TanData_[id.x] = tan(TanData_[id.x]);
}

#pragma kernel Tanh

StructuredBuffer<float> TanhData;
RWStructuredBuffer<float> TanhResult;

[numthreads(4,1,1)]
void Tanh (uint3 id: SV_DispatchThreadID) {
	TanhResult[id.x] = tanh(TanhData[id.x]);
}

#pragma kernel Sinh

StructuredBuffer<float> SinhData;
RWStructuredBuffer<float> SinhResult;

[numthreads(4,1,1)]
void Sinh (uint3 id: SV_DispatchThreadID) {
	SinhResult[id.x] = sinh(SinhData[id.x]);
}

#pragma kernel Sinh_
RWStructuredBuffer<float> SinhData_;

[numthreads(4,1,1)]
void Sinh_ (uint3 id: SV_DispatchThreadID) {
    SinhData_[id.x] = sinh(SinhData_[id.x]);
}

#pragma kernel Triu_

StructuredBuffer<int> TriuK_;
StructuredBuffer<Dimensions> TriuDimensions_;
RWStructuredBuffer<float> TriuData_;

[numthreads(4,1,1)]
void Triu_ (uint3 id: SV_DispatchThreadID) {

	int rows = TriuDimensions_[0].rows;
	int columns = TriuDimensions_[0].columns;
	int k = TriuK_[0];

	int col = (int)(id % columns);
	int row = (int)((id - col) / columns);
	if (col < row + k)
	{
		TriuData_[id.x] = 0;
	}
}

#pragma kernel Trunc

StructuredBuffer<float> TruncData;
RWStructuredBuffer<float> TruncResult;

[numthreads(4,1,1)]
void Trunc (uint3 id: SV_DispatchThreadID) {
	TruncResult[id.x] = trunc(TruncData[id.x]);
}

#pragma kernel Zero_

RWStructuredBuffer<float> ZeroData_;

[numthreads(4,1,1)]
void Zero_ (uint3 id: SV_DispatchThreadID) {
       ZeroData_[id.x] = 0;
}
